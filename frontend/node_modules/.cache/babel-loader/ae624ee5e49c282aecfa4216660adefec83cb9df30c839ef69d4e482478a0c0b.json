{"ast":null,"code":"const API_URL = 'http://localhost:4000'; // Ensure this matches your backend API URL\n\n// Register function\nexport const register = async (username, password) => {\n  const response = await fetch(`${API_URL}/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  return response.json();\n};\n\n// Login function (already existing)\nexport const login = async (username, password) => {\n  const response = await fetch(`${API_URL}/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  return response.json();\n};\n\n// Fetch all products\nexport const getProduk = async () => {\n  const response = await fetch(`${API_URL}/produk`);\n  return response.json();\n};\n\n// Add product to cart\nexport const addToCart = async (userId, productId, quantity) => {\n  const response = await fetch(`${API_URL}/cart/add`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      userId,\n      productId,\n      quantity\n    })\n  });\n  return response.json();\n};\n\n// Fetch cart items for a user\nexport const getCart = async userId => {\n  const response = await fetch(`${API_URL}/cart/${userId}`);\n  return response.json();\n};\n\n// Remove product from cart\nexport const removeFromCart = async (userId, productId) => {\n  if (!userId || !productId) {\n    console.error('Invalid data:', {\n      userId,\n      productId\n    });\n    return {\n      error: 'Invalid data'\n    };\n  }\n  const response = await fetch(`${API_URL}/cart/remove`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      userId,\n      productId\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to remove item');\n  }\n  return response.json();\n};\nexport const processPayment = async (userId, selectedItems, metodePembayaran, nomorRekening) => {\n  const response = await fetch(`${API_URL}/payment/process`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      userId,\n      selectedItems,\n      metodePembayaran,\n      nomorRekening\n    })\n  });\n  return response.json();\n};\nexport const createOrder = async (userId, items, metodePembayaran, nomorRekening) => {\n  const response = await fetch(`${API_URL}/pesan`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      userId,\n      items,\n      metodePembayaran,\n      nomorRekening\n    })\n  });\n  return response.json();\n};\nexport const getPesanan = async userId => {\n  const response = await fetch(`http://localhost:4000/pesanan/${userId}`);\n  return response.json();\n};\n\n// Khusus untuk Penjual\n\n// Add new product\nexport const addProduk = async data => {\n  const response = await fetch(`${API_URL}/produk`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  return response.json();\n};\n\n// Update product\nexport const updateProduk = async (id, data) => {\n  const response = await fetch(`${API_URL}/produk/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  return response.json();\n};\n\n// Delete product\nexport const deleteProduk = async id => {\n  const response = await fetch(`${API_URL}/produk/${id}`, {\n    method: 'DELETE'\n  });\n  return response.json();\n};","map":{"version":3,"names":["API_URL","register","username","password","response","fetch","method","headers","body","JSON","stringify","json","login","getProduk","addToCart","userId","productId","quantity","getCart","removeFromCart","console","error","ok","Error","processPayment","selectedItems","metodePembayaran","nomorRekening","createOrder","items","getPesanan","addProduk","data","updateProduk","id","deleteProduk"],"sources":["C:/E-TokoBeras/frontend/src/api.js"],"sourcesContent":["const API_URL = 'http://localhost:4000'; // Ensure this matches your backend API URL\r\n\r\n// Register function\r\nexport const register = async (username, password) => {\r\n    const response = await fetch(`${API_URL}/register`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ username, password }),\r\n    });\r\n    return response.json();\r\n  };\r\n  \r\n  // Login function (already existing)\r\n  export const login = async (username, password) => {\r\n    const response = await fetch(`${API_URL}/login`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ username, password }),\r\n    });\r\n    return response.json();\r\n  };\r\n\r\n// Fetch all products\r\nexport const getProduk = async () => {\r\n  const response = await fetch(`${API_URL}/produk`);\r\n  return response.json();\r\n};\r\n\r\n// Add product to cart\r\nexport const addToCart = async (userId, productId, quantity) => {\r\n  const response = await fetch(`${API_URL}/cart/add`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ userId, productId, quantity }),\r\n  });\r\n  return response.json();\r\n};\r\n\r\n// Fetch cart items for a user\r\nexport const getCart = async (userId) => {\r\n  const response = await fetch(`${API_URL}/cart/${userId}`);\r\n  return response.json();\r\n};\r\n\r\n// Remove product from cart\r\nexport const removeFromCart = async (userId, productId) => {\r\n    if (!userId || !productId) {\r\n      console.error('Invalid data:', { userId, productId });\r\n      return { error: 'Invalid data' };\r\n    }\r\n  \r\n    const response = await fetch(`${API_URL}/cart/remove`, {\r\n      method: 'DELETE',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ userId, productId }),\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      const error = await response.json();\r\n      throw new Error(error.error || 'Failed to remove item');\r\n    }\r\n  \r\n    return response.json();\r\n  };  \r\n\r\nexport const processPayment = async (userId, selectedItems, metodePembayaran, nomorRekening) => {\r\n    const response = await fetch(`${API_URL}/payment/process`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ userId, selectedItems, metodePembayaran, nomorRekening }),\r\n    });\r\n    return response.json();\r\n  };  \r\n\r\n  export const createOrder = async (userId, items, metodePembayaran, nomorRekening) => {\r\n    const response = await fetch(`${API_URL}/pesan`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ userId, items, metodePembayaran, nomorRekening }),\r\n    });\r\n    return response.json();\r\n  };\r\n  \r\nexport const getPesanan = async (userId) => {\r\n    const response = await fetch(`http://localhost:4000/pesanan/${userId}`);\r\n    return response.json();\r\n  };\r\n  \r\n// Khusus untuk Penjual\r\n\r\n// Add new product\r\nexport const addProduk = async (data) => {\r\n  const response = await fetch(`${API_URL}/produk`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(data),\r\n  });\r\n  return response.json();\r\n};\r\n\r\n// Update product\r\nexport const updateProduk = async (id, data) => {\r\n  const response = await fetch(`${API_URL}/produk/${id}`, {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(data),\r\n  });\r\n  return response.json();\r\n};\r\n\r\n// Delete product\r\nexport const deleteProduk = async (id) => {\r\n  const response = await fetch(`${API_URL}/produk/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n  return response.json();\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}